<?xml version="1.0" encoding="utf-8"?>
<project default="compile">

  <!-- build.xml for Mantis issue 0000748
       name: Sam Baldwin for CS56, S12 -->

    <!-- cleaned up by John Bowman, Devon Porcher -->

  <property environment="env"/> <!-- load the environment variables -->





  <property name="mainClass" value="edu.ucsb.cs56.projects.games.pokemon.framework.Main" />



  <path id="project.class.path">
         <pathelement location="build"/>
         <pathelement location="lib/junit-4.8.2.jar" />
  </path>

  <target name="compile" description="Compiles code">
    <mkdir dir="build" />
    <javac srcdir="src" destdir="build" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
     <classpath refid="project.class.path" />
    </javac>
   

    <copy todir="build/images">
	<fileset dir="src/edu/ucsb/cs56/projects/games/pokemon/images"/>
    </copy>
    <copy todir="build/music">
	<fileset dir="src/edu/ucsb/cs56/projects/games/pokemon/music"/>
    </copy>
  </target>

  <target name="run" depends="compile" description="Runs Main (The game itself)">
    <java classname="${mainClass}" classpath="build" fork="true" />  
  </target>

  <target name="clean" description="Cleans old compiled files">
    <delete dir="build" quiet="true" />
    <delete dir="javadoc" quiet="true" />
    <delete dir="dist" quiet="true" />
    <delete dir="download" quiet="true" />
    <delete dir="temp" quiet="true" />
  </target>

  <target name="test" depends="compile" description="Runs all JUnit tests. Tests must end with 'Test.java'">

   <junit haltonerror="no" haltonfailure="no">
       <classpath refid="project.class.path" />

       <batchtest fork="yes">
          <fileset dir="src">
            <!-- this will pick up every class with a name ending in Test -->
            <include name="**/*Test.java"/>
          </fileset>
       </batchtest>

        <formatter type="plain" usefile="false" /> 
       
   </junit>
  </target>
  
 <target name="javadoc" depends="compile" description="Creates the javadoc--NONFUNCTIONING">
 
   <delete dir="javadoc" quiet="true" /> 
   <javadoc  destdir="javadoc" author="true" version="true" use="true" >  
      <fileset dir="src" includes="**/*.java"/>  
      <classpath refid="project.class.path" />

   </javadoc>

   <!-- delete the old javadoc -->
   <delete quiet="true" dir="${javadocDest}" /> 

   <!-- copy everything you just made to the javadoc destination, and then make it readable --> 
 
   <copy todir="${javadocDest}" > 
     <fileset dir="javadoc"/> 
   </copy> 
 
   <!-- Note: this only does the chmod command on the 
        javadoc subdirectory and its contents.  You MIGHT have to
	MANUALLY do the chmod on the parent directories.  However,
	you should only need to do that once. --> 
 
   <chmod dir="${javadocDest}" perm="755"  type="dir" includes="**" /> 
   <chmod dir="${javadocDest}" perm="755"  type="file" includes="**/*" /> 
   <echo>Javadoc deployed to ${javadocURL}</echo> 

 </target>

 <target name="jar" depends="compile" description="Creates the jar file--NONFUNCTIONING">
   <mkdir dir="dist" />
   <jar destfile="dist/${projectName}.jar" basedir="build" >
       <manifest>
         <attribute name="Main-Class" value="${mainClass}"/>
       </manifest>
   </jar>
 </target>



</project>
